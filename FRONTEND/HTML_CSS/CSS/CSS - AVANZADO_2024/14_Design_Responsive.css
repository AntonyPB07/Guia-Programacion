div {
    height: 100px;
    /*tamaño predeterminado de altura*/
    min-height: 80px;
    /*tamaño mínimo de la altula*/
    max-height: 160px;
    /*tamaño máximo de altura*/
    width: 200px;
    /*tamaño predeterminado del ancho*/
    max-width: 300px;
    /*tamaño máximo del ancho*/
    min-width: 150px;
    /*tamaño nínimo del ancho*/
}

image {
    aspect-ratio: 16/9;
    /*Esta propiedad se usa en imagenes y videos*/
}

/*! Ejemplo de Media Queries*/
/* Estilos para pantallas pequeñas (menos de 600px de ancho) */
@media (max-width: 599px) {

    /* Estilos específicos para pantallas pequeñas */
    .menu {
        display: none;
        /* Ocultar el menú en pantallas pequeñas */
    }
}

/* Estilos para pantallas grandes (más de 1200px de ancho) */
@media (min-width: 1201px) {

    /* Estilos específicos para pantallas grandes */
    .sidebar {
        width: 300px;
        float: left;
    }

    .content {
        width: calc(100% - 300px);
        float: right;
    }
}

/* Estilos para pantallas en orientación vertical */
@media (orientation: portrait) {

    /* Estilos específicos para orientación vertical */
    .header {
        height: 100px;
    }
}

/* Estilos para pantallas con resolución de al menos 300dpi */
@media (min-resolution: 300dpi) {

    /* Estilos específicos para pantallas de alta resolución */
    body {
        font-size: 20px;
    }
}

/*! Support*/
/*? @supports se utiliza para realizar consultas de compatibilidad en CSS.*/
/* Aplicar estilos solo si el navegador admite la propiedad 'display: grid' */
@supports (display: grid) {

    /* Estilos para usar CSS Grid */
    .container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-gap: 10px;
    }
}

/* Aplicar estilos solo si el navegador NO admite la propiedad 'display: grid' */
@supports not (display: grid) {

    /* Estilos alternativos si no se admite CSS Grid */
    .container {
        float: left;
        width: 50%;
    }
}

/*! Container Queries*/
/*? Permites definir reglas de estilo que responden a las dimensiones de su contenedor padre en lugar de la ventana gráfica. Esto permitiría aplicar estilos 
/*?     que se ajusten dinámicamente según las dimensiones del contenedor que los contiene.*/
/* Hipotética sintaxis de container query */
@container (min-width: 300px) {

    /* Estilos que se aplicarán cuando el contenedor tenga un ancho mínimo de 300px */
    .component {
        width: 100%;
        font-size: 16px;
    }
}

@container (min-width: 600px) {

    /* Estilos que se aplicarán cuando el contenedor tenga un ancho mínimo de 600px */
    .component {
        width: 50%;
        font-size: 18px;
    }
}

/** Ejemplo Container Queries*/
/*
<div class="post">
<div class="card">
}<h2>Card title</h2>
<p>Card content</p>
</div>
</div>*/

.post {
    container-type: inline-size;
    container-name: sidebar;
}

.post { /*! Shorthand*/
    container: sidebar / inline-size;
}


/* Default heading styles for the card title */
.card h2 {
    font-size: 1em;
}

/* If the container is larger than 700px */
@container sidebar(min-width: 700px) {
    .card h2 {
        font-size: 2em;
    }
}